<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PKM Kaben - Satu Data</title>

    <!-- Tailwind -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Charts -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        
        .glass-effect {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .card-hover {
            transition: all 0.3s ease;
        }

        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Loading Animation */
        .loading-pulse {
            position: relative;
            overflow: hidden;
        }

        .loading-pulse::after {
            animation: pulse 1.5s cubic-bezier(0.4, 0, 0.2, 1) infinite;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.5), transparent);
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            top: 0;
            transform: translateX(-100%);
        }

        @keyframes pulse {
            100% {
                transform: translateX(100%);
            }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">

    <!-- Navigation -->
    <nav class="glass-effect fixed w-full z-50 shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <span class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600">
                            CoreTrack
                        </span>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <span class="text-sm text-gray-500">Last Updated: {{ now()->format('d M Y H:i') }}</span>
                </div>
                <button class="bg-gray-300 rounded-md shadow-md">
                    <a href="/dashboard">
                    <h1 class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 px-4 hover:scale-110 transition-all duration-300">Dashboard</h1></a>
                </button>
            </div>
        </div>
    </nav>

<!-- Hero Section -->
<div class="gradient-bg pt-24 pb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <h1 class="text-4xl font-bold text-white mb-2">
                Data Analytics Dashboard
            </h1>
            <p class="text-gray-200">
                Analisa Secara Komprehensif Terhadap Data Kesehatan Masyarakat
            </p>
        </div>
    </div>
</div>
<!-- Main Content -->
<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-8">
    <!-- Analytics Card -->
    <div class="glass-effect rounded-xl shadow-lg p-6 mb-8">
        <!-- Filter Tabs -->
        <div class="mb-6">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                    @foreach($variableGroups as $groupKey => $group)
                    <button 
                        class="filter-tab whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm
                               {{ $loop->first ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' }}"
                        data-tab="{{ $groupKey }}">
                        {{ $group['title'] }}
                    </button>
                    @endforeach
                </nav>
            </div>
        </div>

        <!-- Filter Content -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach($variableGroups as $groupKey => $group)
            <div class="filter-content {{ !$loop->first ? 'hidden' : '' }}" data-content="{{ $groupKey }}">
                <div class="bg-white rounded-lg shadow-sm p-6 card-hover">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">{{ $group['title'] }}</h3>
                    <div class="space-y-4">
                        @foreach($group['variables'] as $key => $variable)
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                {{ $variable['label'] }}
                            </label>

                            @if($variable['type'] === 'select')
                            <select name="filters[{{ $key }}]" 
                                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">Semua</option>
                                @foreach($variable['options'] as $optionKey => $optionLabel)
                                <option value="{{ $optionKey }}">{{ $optionLabel }}</option>
                                @endforeach
                            </select>

                            @elseif($variable['type'] === 'boolean')
                            <div class="grid grid-cols-3 gap-4">
                                <label class="flex items-center">
                                    <input type="radio" name="filters[{{ $key }}]" value="" 
                                           class="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500" checked>
                                    <span class="ml-2 text-sm text-gray-600">Semua</span>
                                </label>
                                @foreach($variable['options'] as $optionKey => $optionLabel)
                                <label class="flex items-center">
                                    <input type="radio" name="filters[{{ $key }}]" value="{{ $optionKey }}"
                                           class="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                                    <span class="ml-2 text-sm text-gray-600">{{ $optionLabel }}</span>
                                </label>
                                @endforeach
                            </div>
                            @endif
                        </div>
                        @endforeach
                    </div>
                </div>
            </div>
            @endforeach
        </div>

        <!-- Visualization Options -->
        <div class="mt-8 p-6 bg-white rounded-lg shadow-sm card-hover">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Visualisasi Data</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Tipe Visualisasi
                    </label>
                    <select id="visualizationType" 
                            class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        @foreach($visualizationTypes as $key => $label)
                        <option value="{{ $key }}">{{ $label }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="flex items-end">
                    <button id="analyzeBtn" 
                            class="w-full py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white gradient-bg hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Analisis Data
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div id="results" class="glass-effect rounded-xl shadow-lg p-6 mb-8">
        <div id="loadingIndicator" class="hidden">
            <div class="flex items-center justify-center p-8">
                <div class="loading-pulse w-8 h-8 rounded-full gradient-bg"></div>
                <span class="ml-3 text-gray-600">Menganalisis data...</span>
            </div>
        </div>
        <div id="chartArea" class="min-h-[10px]"></div>
        <div id="tableArea" class="overflow-x-auto"></div>
    </div>
</main>
<!-- Footer Section -->
{{-- <footer class="bg-white">
    <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div class="text-center text-gray-500 text-sm">
            &copy; {{ date('Y') }} PISPK Analytics. All rights reserved.
        </div>
    </div>
</footer> --}}

@include('includes.footer')

<!-- Scripts -->
<script>
$(document).ready(function() {
    // Tab Switching
    $('.filter-tab').click(function() {
        // Remove active states
        $('.filter-tab').removeClass('border-blue-500 text-blue-600')
            .addClass('border-transparent text-gray-500');
        
        // Add active state to clicked tab
        $(this).addClass('border-blue-500 text-blue-600')
            .removeClass('border-transparent text-gray-500');
        
        // Hide all content
        $('.filter-content').addClass('hidden');
        
        // Show selected content
        $('.filter-content[data-content="' + $(this).data('tab') + '"]').removeClass('hidden');
    });

    // Analysis Button Click Handler
    $('#analyzeBtn').click(function() {
        const filters = {};
        let hasFilters = false;
        
        // Collect all filter values
        $('select[name^="filters"], input[name^="filters"]:checked').each(function() {
            const name = $(this).attr('name').match(/\[(.*?)\]/)[1];
            const value = $(this).val();
            if (value !== '') {
                filters[name] = value;
                hasFilters = true;
            }
        });

        if (!hasFilters) {
            showNotification('Pilih minimal satu filter untuk analisis', 'warning');
            return;
        }

        // Show loading state
        $('#loadingIndicator').removeClass('hidden');
        $('#chartArea, #tableArea').empty();

        // Animate scroll to results
        $('html, body').animate({
            scrollTop: $('#results').offset().top - 100
        }, 500);

        // Make AJAX request
        $.ajax({
            url: '{{ route("analysis.analyze") }}',
            method: 'POST',
            data: {
                _token: '{{ csrf_token() }}',
                filters: filters,
                visualization_type: $('#visualizationType').val()
            },
            success: function(response) {
                $('#loadingIndicator').addClass('hidden');
                if (response.success) {
                    renderVisualization(response.data);
                    showNotification('Analisis berhasil dilakukan', 'success');
                } else {
                    showNotification(response.message || 'Gagal menganalisis data', 'error');
                }
            },
            error: function(xhr) {
                $('#loadingIndicator').addClass('hidden');
                console.error('Analysis Error:', xhr.responseJSON);
                showNotification(xhr.responseJSON?.message || 'Terjadi kesalahan dalam analisis', 'error');
            }
        });
    });

    // Notification System
    function showNotification(message, type = 'info') {
        const colors = {
            success: 'bg-green-500',
            error: 'bg-red-500',
            warning: 'bg-yellow-500',
            info: 'bg-blue-500'
        };

        const notification = $(`
            <div class="fixed top-4 right-4 z-50 rounded-lg shadow-lg ${colors[type]} text-white px-6 py-4 transform transition-all duration-300 translate-x-full">
                ${message}
            </div>
        `).appendTo('body');

        setTimeout(() => {
            notification.removeClass('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.addClass('translate-x-full');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    // Visualization Renderers
    function renderVisualization(data) {
        switch(data.type) {
            case 'table':
                renderTable(data);
                break;
            case 'bar':
                renderBarChart(data);
                break;
            case 'pie':
                renderPieChart(data);
                break;
            case 'line':
                renderLineChart(data);
                break;
        }
    }

    // function renderTable(data) {
    //     const tableHtml = `
    //         <div class="shadow overflow-hidden border-b border-gray-200 rounded-lg">
    //             <table class="min-w-full divide-y divide-gray-200">
    //                 <thead class="bg-gray-50">
    //                     <tr>
    //                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50">
    //                             No
    //                         </th>
    //                         ${data.headers.map(header => `
    //                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
    //                                 ${header}
    //                             </th>
    //                         `).join('')}
    //                     </tr>
    //                 </thead>
    //                 <tbody class="bg-white divide-y divide-gray-200">
    //                     ${data.rows.map((row, index) => `
    //                         <tr class="hover:bg-gray-50">
    //                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 sticky left-0 bg-white">
    //                                 ${index + 1}
    //                             </td>
    //                             ${row.map(cell => `
    //                                 <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
    //                                     ${cell}
    //                                 </td>
    //                             `).join('')}
    //                         </tr>
    //                     `).join('')}
    //                 </tbody>
    //             </table>
    //         </div>
    //     `;

    //     $('#tableArea').html(tableHtml);
    //     $('#chartArea').empty();
    // }

    // baru tambah
    function renderTable(data) {
    const tableHtml = `
        <div class="inline-block min-w-full">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="sticky left-0 bg-gray-50 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            No
                        </th>
                        ${data.headers.map(header => `
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                                ${header}
                            </th>
                        `).join('')}
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    ${data.rows.map((row, index) => `
                        <tr>
                            <td class="sticky left-0 bg-white px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                ${index + 1}
                            </td>
                            ${row.map(cell => `
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    ${cell}
                                </td>
                            `).join('')}
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;

    $('#tableArea').html(tableHtml);
    $('#chartArea').empty();
}
    // baru tambah

    function renderBarChart(data) {
        $('#chartArea').empty();
        $('#tableArea').empty();

        const options = {
            chart: {
                type: 'bar',
                height: 500,
                fontFamily: 'Inter, sans-serif',
                toolbar: {
                    show: true,
                    tools: {
                        download: true,
                        selection: false,
                        zoom: false,
                        zoomin: false,
                        zoomout: false,
                        pan: false,
                        reset: false
                    }
                }
            },
            series: [{
                name: data.datasets[0].label,
                data: data.datasets[0].data
            }],
            xaxis: {
                categories: data.labels,
                labels: {
                    style: {
                        fontSize: '12px',
                        fontFamily: 'Inter, sans-serif'
                    }
                }
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '55%',
                    borderRadius: 4,
                    dataLabels: {
                        position: 'top'
                    }
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function(val) {
                    return val.toLocaleString()
                },
                style: {
                    fontSize: '12px',
                    fontFamily: 'Inter, sans-serif'
                }
            },
            title: {
                text: data.datasets[0].label,
                align: 'center',
                style: {
                    fontSize: '16px',
                    fontWeight: 600,
                    fontFamily: 'Inter, sans-serif'
                }
            },
            colors: ['#6366F1'],
            theme: {
                mode: 'light'
            }
        };

        const chart = new ApexCharts(document.querySelector("#chartArea"), options);
        chart.render();
    }

    function renderPieChart(data) {
        $('#chartArea').empty();
        $('#tableArea').empty();

        const options = {
            chart: {
                type: 'pie',
                height: 500,
                fontFamily: 'Inter, sans-serif'
            },
            series: data.datasets[0].data,
            labels: data.labels,
            title: {
                text: data.datasets[0].label,
                align: 'center',
                style: {
                    fontSize: '16px',
                    fontWeight: 600,
                    fontFamily: 'Inter, sans-serif'
                }
            },
            legend: {
                position: 'bottom',
                fontFamily: 'Inter, sans-serif'
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        width: 320
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }],
            colors: ['#6366F1', '#4F46E5', '#4338CA', '#3730A3', '#312E81']
        };

        const chart = new ApexCharts(document.querySelector("#chartArea"), options);
        chart.render();
    }

    function renderLineChart(data) {
        $('#chartArea').empty();
        $('#tableArea').empty();

        const options = {
            chart: {
                type: 'line',
                height: 500,
                fontFamily: 'Inter, sans-serif',
                dropShadow: {
                    enabled: true,
                    color: '#000',
                    top: 18,
                    left: 7,
                    blur: 10,
                    opacity: 0.2
                }
            },
            series: [{
                name: data.datasets[0].label,
                data: data.datasets[0].data
            }],
            xaxis: {
                categories: data.labels
            },
            title: {
                text: data.datasets[0].label,
                align: 'center'
            },
            markers: {
                size: 5,
                hover: {
                    size: 7
                }
            },
            stroke: {
                curve: 'smooth'
            },
            grid: {
                borderColor: '#e0e0e0',
                row: {
                    colors: ['#f3f3f3', 'transparent'],
                    opacity: 0.5
                }
            }
        };

        const chart = new ApexCharts(document.querySelector("#chartArea"), options);
        chart.render();
    }
});
</script>

</body>
</html>