<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Permissions-Policy" content="interest-cohort=(), geolocation=*">
    <title>Map</title>

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <!-- Leaflet Routing Machine CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
    <!-- Geolocation Control CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.css" />

    <style>

        .route-summary {
            padding: 10px;
            min-width: 200px;
        }

        .route-summary h4 {
            margin: 0 0 8px 0;
            color: #2c3e50;
        }

        .route-summary p {
            margin: 4px 0;
            color: #34495e;
        }

        /* Style untuk garis rute */
        .leaflet-routing-alt {
            display: none; /* Sembunyikan panel instruksi default */
        }

        .leaflet-routing-container {
            display: none; /* Sembunyikan container routing default */
        }

        /* Custom Marker Styles */
        .route-summary {
            padding: 10px;
        }

        .route-summary h4 {
            margin: 0 0 8px 0;
            color: #2c3e50;
        }

        .route-summary p {
            margin: 4px 0;
            color: #34495e;
        }

        #routeLoading {
            background: rgba(255, 255, 255, 0.9);
            padding: 8px 12px;
            border-radius: 4px;
            margin-top: 8px;
            text-align: center;
            display: none;
        }

        #routeLoading.active {
            display: block;
        }

        /* Popup Styles */
        .custom-popup {
            padding: 5px;
        }

        .popup-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-top: 10px;
        }

        .popup-button {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            width: 100%;
        }

        .detail-button {
            background-color: #3498db;
            color: white;
        }

        .detail-button:hover {
            background-color: #2980b9;
        }

        .route-button {
            background-color: #2ecc71;
            color: white;
        }

        .route-button:hover {
            background-color: #27ae60;
        }

        /* Perbaikan ukuran popup */
        .leaflet-popup-content {
            margin: 8px;
            min-width: 200px;
        }

        .leaflet-popup-content h3 {
            margin: 0 0 8px 0;
            font-size: 16px;
        }

        .leaflet-popup-content p {
            margin: 4px 0;
        }


        /* Route Summary Styles */
        .route-summary {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .route-steps {
            list-style: none;
            padding: 0;
        }

        .route-steps li {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }

        .route-steps li:last-child {
            border-bottom: none;
        }

        /* Leaflet Routing Control Styles */
        .leaflet-routing-container {
            background: white;
            padding: 10px;
            margin: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            max-width: 320px;
        }

        .leaflet-routing-alt {
            max-height: 300px;
            overflow-y: auto;
            padding: 10px;
        }

        .leaflet-routing-alt h2 {
            font-size: 16px;
            margin: 0 0 10px 0;
        }

        .leaflet-routing-icon {
            background-image: url('https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet.routing.icons.png');
        }


        /* Navbar Styles */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: white;
            padding: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1001;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .navbar-brand {
            font-weight: bold;
            font-size: 1.5rem;
            background: linear-gradient(to right, #2563eb, #4f46e5);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            transition: all 0.3s ease;
            margin-left: 0.75rem;
        }

        .navbar-brand:hover {
            background: linear-gradient(to right, #4f46e5, #2563eb);
            -webkit-background-clip: text;
            background-clip: text;
        }

        .navbar-links {
            display: flex;
            gap: 1.5rem;
            margin-right: 1rem;
        }

        .navbar-links a {
            color: #1e293b;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .navbar-links a:hover {
            background: linear-gradient(to right, #2563eb, #4f46e5);
            color: white;
        }

        .navbar-toggle {
            display: none;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.5rem;
            color: #1e293b;
        }

        /* Adjust map container for navbar */
        #mapContainer {
            padding-top: 64px;
            height: calc(100vh - 64px);
            width: 100%;
            margin-top: 64px;
        }
        /* Mobile Responsive Navbar */
        @media screen and (max-width: 768px) {
            .navbar-toggle {
                display: block;
                margin-right: 0.75rem;
            }

            .navbar-links {
                display: none;
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: white;
                flex-direction: column;
                padding: 1rem;
                gap: 0.5rem;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-right: 0;
            }

            .navbar-links.active {
                display: flex;
            }

            .navbar-links a {
                padding: 0.75rem 1rem;
                width: 100%;
                text-align: left;
            }

            #mapContainer {
                height: calc(100vh - 56px);
                margin-top: 56px;
            }
        }

        /* Reset dan Layout Dasar */
        body { 
            margin: 0; 
            padding: 0; 
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }
        
        #mapContainer { 
            height: 100vh; 
            width: 100%; 
        }
    
        /* Filter Panel Styles */
        .filter-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            z-index: 1000;
            max-width: 300px;
            width: 90%;
        }
    
        .filter-toggle {
            display: none;
            width: 100%;
            padding: 10px;
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 6px;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-weight: 500;
        }

        /* Route Button Styles */
        .route-button {
            background: #3498db;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            margin-top: 10px;
            transition: all 0.3s ease;
        }

        .route-button:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }

        /* Loading Indicator for Route */
        .route-loading {
            display: none;
            margin-top: 10px;
            text-align: center;
            color: #666;
        }

        .route-loading.active {
            display: block;
        }
        /* Filter and House Marker Styles */
        .filter-options {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
    
        .filter-option {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 4px 0;
        }
    
        .filter-option input[type="checkbox"] {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }
    
        /* House Marker Styles */
        .house-marker {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            font-size: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
    
        .house-marker:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
    
        .house-marker span {
            margin-top: 4px;
        }

        /* Modal Base Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            overflow-y: auto;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
            border-radius: 8px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 15px;
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        /* Routing Control Styles */
        .leaflet-routing-container {
            background: white;
            padding: 10px;
            margin: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .leaflet-routing-alt {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 10px;
        }

        .leaflet-routing-geocoders {
            margin-bottom: 10px;
        }

        .leaflet-routing-geocoder input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        /* Detail Components */
        .detail-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: 8px;
        }

        .family-card {
            border: 1px solid #ddd;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            background-color: white;
        }

        .status-indicator {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 13px;
            font-weight: 500;
            margin: 2px;
        }

        .status-yes {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-no {
            background-color: #fee2e2;
            color: #991b1b;
        }

        /* Table Styles */
        .family-members-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            background-color: white;
        }

        .family-members-table th,
        .family-members-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        .family-members-table th {
            background-color: #f3f4f6;
            font-weight: 600;
        }

        /* Location Control Styles */
        .leaflet-control-locate {
            border: 2px solid rgba(0,0,0,0.2);
            background-clip: padding-box;
        }

        .leaflet-control-locate a {
            background-color: #fff;
            background-position: -3px -2px;
        }

        .leaflet-control-locate.active a {
            color: #2074B6;
        }

        /* Route Instructions Panel */
        .route-instructions {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .route-instructions h4 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 16px;
        }

        .route-instructions ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .route-instructions li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }

        .route-instructions li:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <a href="/" class="navbar-brand">PkmKaben</a>
        <button class="navbar-toggle" onclick="toggleNavbar()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
        </button>
        <div class="navbar-links" id="navbarLinks">
            <a href="/dashboard">Dashboard</a>
            <a href="/analysis">Analysis</a>
            <a href="/about">About</a>
        </div>
    </nav>

    <div id="mapContainer"></div>

    <!-- Modal untuk detail -->
    <div id="buildingModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="buildingDetails"></div>
        </div>
    </div>

    <!-- Route Instructions Modal -->
    <div id="routeModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeRouteModal()">&times;</span>
            <div class="route-instructions">
                <h4>Petunjuk Arah</h4>
                <div id="routeInstructions"></div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="routeLoading" class="route-loading">
        Mencari rute terbaik...
    </div>

    <script>
        const isLoggedIn = {{ auth()->check() ? 'true' : 'false' }};
    </script>

    <!-- Library Scripts -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.js"></script>
    <!-- Custom JavaScript -->
<script>
    // Inisialisasi variables global
    let mymap;
    let markers = [];
    let routingControl = null;
    let userMarker = null;
    const defaultColor = '#3498db';
    const filterColors = {
        tb: '#e74c3c',
        hypertension: '#e67e22',
        mental: '#9b59b6',
        water: '#c0392b',
        toilet: '#8e44ad'
    };

    // Fungsi untuk toggle navbar mobile
    function toggleNavbar() {
        const navbarLinks = document.getElementById('navbarLinks');
        navbarLinks.classList.toggle('active');
    }

    // Menutup navbar saat klik di luar
    document.addEventListener('click', function(event) {
        const navbar = document.querySelector('.navbar');
        const navbarLinks = document.getElementById('navbarLinks');
        const navbarToggle = document.querySelector('.navbar-toggle');
        
        if (!navbar.contains(event.target)) {
            navbarLinks.classList.remove('active');
        }
    });

    // Fungsi untuk membuat marker rumah
    function createHouseMarker(building, color = defaultColor) {
        return L.divIcon({
            html: `
                <div class="house-marker" style="background-color: ${color}">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20">
                        <path fill="white" d="M19 9.3V4h-3v2.6L12 3 2 12h3v8h5v-6h4v6h5v-8h3l-3-2.7zM12 18.5h-2v-6H8v6H6v-8l6-5.5 6 5.5v8h-2v-6h-2v6h-2v-6z"/>
                    </svg>
                    <span>${building.building_number}</span>
                </div>`,
            className: 'custom-house-marker',
            iconSize: [40, 50],
            iconAnchor: [20, 50],
            popupAnchor: [0, -45]
        });
    }

    // Fungsi untuk mendapatkan lokasi pengguna
    function getUserLocation() {
        return new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
                position => resolve([position.coords.latitude, position.coords.longitude]),
                error => reject(error)
            );
        });
    }

    // Fungsi untuk menampilkan rute
    async function showRoute(targetLat, targetLng) {
    try {
        document.getElementById('routeLoading').classList.add('active');
        
        // Debug koordinat target
        console.log('Target coordinates:', {
            targetLat: targetLat,
            targetLng: targetLng,
            targetLatType: typeof targetLat,
            targetLngType: typeof targetLng
        });

        // Dapatkan lokasi pengguna
        const userLocation = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const userLat = position.coords.latitude;
                    const userLng = position.coords.longitude;
                    console.log('User location:', {
                        userLat: userLat,
                        userLng: userLng,
                        userLatType: typeof userLat,
                        userLngType: typeof userLng
                    });
                    resolve([userLat, userLng]);
                },
                (error) => {
                    console.error('Geolocation error:', error);
                    reject('Tidak dapat mengakses lokasi. Pastikan GPS aktif.');
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        });

        // Validasi koordinat yang lebih longgar
        const isValidCoord = (lat, lng) => {
            return typeof lat === 'number' && typeof lng === 'number' &&
                   !isNaN(lat) && !isNaN(lng) &&
                   lat >= -90 && lat <= 90 &&
                   lng >= -180 && lng <= 180;
        };

        // Convert koordinat ke number jika string
        const userLat = parseFloat(userLocation[0]);
        const userLng = parseFloat(userLocation[1]);
        const destLat = parseFloat(targetLat);
        const destLng = parseFloat(targetLng);

        console.log('Converted coordinates:', {
            userLat, userLng, destLat, destLng
        });

        if (!isValidCoord(userLat, userLng)) {
            throw new Error(`Koordinat lokasi Anda tidak valid: ${userLat}, ${userLng}`);
        }

        if (!isValidCoord(destLat, destLng)) {
            throw new Error(`Koordinat tujuan tidak valid: ${destLat}, ${destLng}`);
        }

        // Hapus rute sebelumnya
        if (routingControl) {
            mymap.removeControl(routingControl);
        }

        // Buat routing control baru
        routingControl = L.Routing.control({
            waypoints: [
                L.latLng(userLat, userLng),
                L.latLng(destLat, destLng)
            ],
            router: L.Routing.osrmv1({
                serviceUrl: 'https://router.project-osrm.org/route/v1',
                profile: 'car'
            }),
            lineOptions: {
                styles: [{color: '#3498db', weight: 4, opacity: 0.7}]
            },
            showAlternatives: false,
            addWaypoints: false,
            draggableWaypoints: false,
            fitSelectedRoutes: true,
            show: false
        }).addTo(mymap);

        // Event listener untuk rute yang ditemukan
        routingControl.on('routesfound', function(e) {
            try {
                const route = e.routes[0];
                const distance = (route.summary.totalDistance / 1000).toFixed(1);
                const time = Math.round(route.summary.totalTime / 60);

                // Pastikan bounds valid sebelum menggunakannya
                if (route.bounds && route.bounds.isValid()) {
                    mymap.fitBounds(route.bounds, {
                        padding: [50, 50]
                    });
                }

                // Tampilkan popup informasi rute
                const popupContent = `
                    <div class="route-summary">
                        <h4>Informasi Rute:</h4>
                        <p>Jarak: ${distance} km</p>
                        <p>Waktu tempuh: ± ${time} menit</p>
                    </div>
                `;

                L.popup()
                    .setLatLng(L.latLng(destLat, destLng))
                    .setContent(popupContent)
                    .openOn(mymap);

            } catch (error) {
                console.error('Error handling route:', error);
            }
        });

        routingControl.on('routingerror', function(e) {
            console.error('Routing error:', e);
        });

    } catch (error) {
        console.error('Error in showRoute:', error);
        alert(error.message || 'Terjadi kesalahan saat menampilkan rute');
    } finally {
        document.getElementById('routeLoading').classList.remove('active');
    }
}
    // Fungsi untuk menampilkan instruksi rute
    function showRouteInstructions(instructions) {
        const instructionsHtml = `
            <ul>
                ${instructions.map(instruction => `
                    <li>${instruction.text} (${Math.round(instruction.distance)}m)</li>
                `).join('')}
            </ul>
        `;
        document.getElementById('routeInstructions').innerHTML = instructionsHtml;
        document.getElementById('routeModal').style.display = 'block';
    }

    // Fungsi untuk menutup modal rute
    function closeRouteModal() {
        document.getElementById('routeModal').style.display = 'none';
    }

    // Modifikasi fungsi loadBuildings untuk menambahkan tombol rute di popup
    function loadBuildings() {
    fetch('/map/buildings')
        .then(response => response.json())
        .then(buildings => {
            markers = buildings.map(building => {
                // Parse koordinat ke number
                const lat = parseFloat(building.latitude);
                const lng = parseFloat(building.longitude);
                
                const marker = L.marker([lat, lng], {
                    icon: createHouseMarker(building)
                })
                .bindPopup(`
                    <div class="custom-popup">
                        <h3>Rumah ${building.building_number}</h3>
                        <p><strong>Desa:</strong> ${building.village}</p>
                        <p><strong>Jumlah KK:</strong> ${building.families_count}</p>
                        <div class="popup-buttons">
                            <button class="popup-button detail-button" onclick="showBuildingDetails(${building.id})">
                                Lihat Detail
                            </button>
                            <button class="popup-button route-button" onclick="showRoute(${lat}, ${lng})">
                                Tampilkan Rute
                            </button>
                        </div>
                    </div>
                `);
                
                marker.addTo(mymap);
                return { marker, building };
            });
        })
        .catch(error => console.error('Error:', error));
}

    // Fungsi untuk menghitung usia
    function calculateAge(birthDate) {
        if (!birthDate) return '-';
        const birth = new Date(birthDate);
        const today = new Date();
        let age = today.getFullYear() - birth.getFullYear();
        const monthDiff = today.getMonth() - birth.getMonth();
        
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        
        return age;
    }

    // Fungsi untuk menutup modal
    function closeModal() {
        document.getElementById('buildingModal').style.display = 'none';
        // Hapus rute jika ada
        if (routingControl) {
            mymap.removeControl(routingControl);
            routingControl = null;
        }
    }

    // Event listener untuk menutup modal saat klik di luar
    window.onclick = function(event) {
        const modal = document.getElementById('buildingModal');
        const routeModal = document.getElementById('routeModal');
        if (event.target == modal) {
            closeModal();
        }
        if (event.target == routeModal) {
            closeRouteModal();
        }
    }
    // Fungsi untuk menampilkan detail Rumahpertama
    // function showBuildingDetails(buildingId) {
    //     fetch(`/map/buildings/${buildingId}`)
    //         .then(response => response.json())
    //         .then(building => {
    //             const isMobile = window.innerWidth <= 768;
    //             let detailsHtml;
                
    //             if (isUserLoggedIn()) {
    //                 // Fungsi untuk membuat tampilan anggota keluarga
    //                 const createMemberView = (members) => {
    //                     if (isMobile) {
    //                         return members.map(member => `
    //                             <div class="member-card">
    //                                 <h3 class="font-bold text-md">${member.name}</h3>
    //                                 <div class="member-info">
    //                                     <p><strong>Hubungan:</strong> ${member.relationship}</p>
    //                                     <p><strong>Gender:</strong> ${member.gender}</p>
    //                                     <p><strong>Usia:</strong> ${calculateAge(member.birth_date)} tahun</p>
    //                                 </div>
    //                             </div>
    //                         `).join('');
    //                     } else {
    //                         return `
    //                             <table class="family-members-table">
    //                                 <thead>
    //                                     <tr>
    //                                         <th>Nama</th>
    //                                         <th>Hubungan</th>
    //                                         <th>Gender</th>
    //                                         <th>Usia</th>
    //                                     </tr>
    //                                 </thead>
    //                                 <tbody>
    //                                     ${members.map(member => `
    //                                         <tr>
    //                                             <td>${member.name}</td>
    //                                             <td>${member.relationship}</td>
    //                                             <td>${member.gender}</td>
    //                                             <td>${calculateAge(member.birth_date)} tahun</td>
    //                                         </tr>
    //                                     `).join('')}
    //                                 </tbody>
    //                             </table>
    //                         `;
    //                     }
    //                 };

    //                 detailsHtml = `
    //                     <div class="modal-header">
    //                         <h2 class="text-xl font-bold">Detail Rumah ${building.building_number}</h2>
    //                     </div>
                        
    //                     <div class="detail-section">
    //                         <h3 class="text-lg font-semibold">Informasi Rumah</h3>
    //                         <p><strong>Nomor Rumah:</strong> ${building.building_number}</p>
    //                         <p><strong>Desa:</strong> ${building.village.name}</p>
    //                         <p><strong>Koordinat:</strong> ${building.latitude}, ${building.longitude}</p>
    //                         <button onclick="showRoute(${building.latitude}, ${building.longitude})" 
    //                                 class="route-button">
    //                             <span>Tunjukkan Arah ke Rumah Ini</span>
    //                         </button>
    //                         <div id="routeLoading" class="route-loading">Mencari rute terbaik...</div>
    //                     </div>
    //                     ...
    //                 `;
    //             } else {
    //                 detailsHtml = formatBlurredContent(building);
    //             }

    //             document.getElementById('buildingDetails').innerHTML = detailsHtml;
    //             document.getElementById('buildingModal').style.display = 'block';
    //         })
    //         .catch(error => console.error('Error:', error));
    // }

    // baru 
        function showBuildingDetails(buildingId) {
        fetch(`/map/buildings/${buildingId}`)
            .then(response => response.json())
            .then(building => {
                const isMobile = window.innerWidth <= 768;
                let detailsHtml;
                
                if (isUserLoggedIn()) {
                    // Fungsi untuk membuat tampilan anggota keluarga
                    const createMemberView = (members) => {
                        if (isMobile) {
                            return members.map(member => `
                                <div class="member-card">
                                    <h3 class="font-bold text-md">${member.name}</h3>
                                    <div class="member-info">
                                        <p><strong>Hubungan:</strong> ${member.relationship}</p>
                                        <p><strong>Gender:</strong> ${member.gender}</p>
                                        <p><strong>Usia:</strong> ${calculateAge(member.birth_date)} tahun</p>
                                    </div>
                                </div>
                            `).join('');
                        } else {
                            return `
                                <table class="family-members-table">
                                    <thead>
                                        <tr>
                                            <th>Nama</th>
                                            <th>Hubungan</th>
                                            <th>Gender</th>
                                            <th>Usia</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${members.map(member => `
                                            <tr>
                                                <td>${member.name}</td>
                                                <td>${member.relationship}</td>
                                                <td>${member.gender}</td>
                                                <td>${calculateAge(member.birth_date)} tahun</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            `;
                        }
                    };

                    detailsHtml = `
                        <div class="modal-header">
                            <h2 class="text-xl font-bold">Detail Rumah ${building.building_number}</h2>
                        </div>
                        
                        <div class="detail-section">
                            <h3 class="text-lg font-semibold">Informasi Rumah</h3>
                            <p><strong>Nomor Rumah:</strong> ${building.building_number}</p>
                            <p><strong>Desa:</strong> ${building.village.name}</p>
                            <p><strong>Koordinat:</strong> ${building.latitude}, ${building.longitude}</p>
                            <p><strong>Jumlah Keluarga:</strong> ${building.families.length}</p>
                        </div>

                        <div class="detail-section">
                            <h3 class="text-lg font-semibold">Informasi Keluarga</h3>
                            ${building.families.map(family => `
                                <div class="family-card">
                                    <h4 class="text-md font-semibold">Keluarga ${family.family_number}</h4>
                                    <p><strong>Kepala Keluarga:</strong> ${family.head_name}</p>
                                    
                                    <div class="mt-2">
                                        <h5 class="font-semibold">Status Fasilitas:</h5>
                                        <div class="facility-status">
                                            <span class="status-indicator ${family.has_clean_water ? 'status-yes' : 'status-no'}">
                                                Air Bersih: ${family.has_clean_water ? 'Ya' : 'Tidak'}
                                            </span>
                                            <span class="status-indicator ${family.is_water_protected ? 'status-yes' : 'status-no'}">
                                                Air Bersih Terlindungi: ${family.is_water_protected ? 'Ya' : 'Tidak'}
                                            </span>
                                            <span class="status-indicator ${family.has_toilet ? 'status-yes' : 'status-no'}">
                                                Memiliki Toilet: ${family.has_toilet ? 'Ya' : 'Tidak'}
                                            </span>
                                            <span class="status-indicator ${family.is_toilet_sanitary ? 'status-yes' : 'status-no'}">
                                                Toilet Saniter: ${family.is_toilet_sanitary ? 'Ya' : 'Tidak'}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div class="mt-2">
                                        <h5 class="font-semibold">Anggota Keluarga:</h5>
                                        ${createMemberView(family.members)}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                } else {
                    detailsHtml = formatBlurredContent(building);
                }

                document.getElementById('buildingDetails').innerHTML = detailsHtml;
                document.getElementById('buildingModal').style.display = 'block';
            })
            .catch(error => console.error('Error:', error));
        }
    // baru

    


    // Inisialisasi map saat halaman dimuat
    document.addEventListener('DOMContentLoaded', function() {
        mymap = L.map('mapContainer').setView([-5.7465, 134.797032], 15);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(mymap);

        // Tambahkan kontrol lokasi
        L.control.locate({
            position: 'topleft',
            strings: {
                title: "Temukan lokasi saya"
            },
            locateOptions: {
                enableHighAccuracy: true
            }
        }).addTo(mymap);

        loadBuildings();
    });
</script>
</body>
</html>